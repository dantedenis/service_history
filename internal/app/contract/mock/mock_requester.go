// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/contract/requester.go

// Package mock_contract is a generated GoMock package.
package mock_contract

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRequester is a mock of IRequester interface.
type MockIRequester struct {
	ctrl     *gomock.Controller
	recorder *MockIRequesterMockRecorder
}

// MockIRequesterMockRecorder is the mock recorder for MockIRequester.
type MockIRequesterMockRecorder struct {
	mock *MockIRequester
}

// NewMockIRequester creates a new mock instance.
func NewMockIRequester(ctrl *gomock.Controller) *MockIRequester {
	mock := &MockIRequester{ctrl: ctrl}
	mock.recorder = &MockIRequesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRequester) EXPECT() *MockIRequesterMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockIRequester) Start(db *sql.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", db)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockIRequesterMockRecorder) Start(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIRequester)(nil).Start), db)
}
