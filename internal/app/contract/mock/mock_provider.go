// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/contract/provider.go

// Package mock_contract is a generated GoMock package.
package mock_contract

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIProvider is a mock of IProvider interface.
type MockIProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIProviderMockRecorder
}

// MockIProviderMockRecorder is the mock recorder for MockIProvider.
type MockIProviderMockRecorder struct {
	mock *MockIProvider
}

// NewMockIProvider creates a new mock instance.
func NewMockIProvider(ctrl *gomock.Controller) *MockIProvider {
	mock := &MockIProvider{ctrl: ctrl}
	mock.recorder = &MockIProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProvider) EXPECT() *MockIProviderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIProvider) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIProviderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIProvider)(nil).Close))
}

// GetConn mocks base method.
func (m *MockIProvider) GetConn() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConn")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// GetConn indicates an expected call of GetConn.
func (mr *MockIProviderMockRecorder) GetConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConn", reflect.TypeOf((*MockIProvider)(nil).GetConn))
}

// Open mocks base method.
func (m *MockIProvider) Open() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockIProviderMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockIProvider)(nil).Open))
}
